import ArgumentParser
import Foundation
import SourceKittenFramework

enum PluginError: String, Swift.Error {
  case noLocalFileAndNoEnums
}

fileprivate extension String {
  var expandingTildeInPath: String {
    return self.replacingOccurrences(of: "~", with: FileManager.default.homeDirectoryForCurrentUser.path)
  }
}


@main
struct PluginExecutable: ParsableCommand {
  
  @Option(help: "The path where the loca file should be to copy secrets from")
  var input: String?
  
  @Option(help: "The path where the generated files will be created")
  var output: String
  
  var linesFromENVVars: String? {
    let env = ProcessInfo.processInfo.environment
    
    // will filter in only env vars begining with "secret_"
    
    let secretPrefix = "secret_"
    
    let keys = env.keys.filter { key in
      key.lowercased().hasPrefix(secretPrefix)
    }
    
    if keys.isEmpty {
      return nil
    }
    
    let pairs: [(key: String, value: String)] = keys.compactMap { key in
      guard let value = env[key] else {
        return nil
      }
      return (key: key, value: value)
    }
    
    let lines = pairs.map { (key, value) in
      print("found env secret \(key)")
      return   " static let \(String(key.dropFirst(secretPrefix.count)).camelized) = \"value\""
    }
    
    return lines.joined(separator: "\n")
  }
  
  func readSecrets(from input: String) -> String? {
    setenv("IN_PROCESS_SOURCEKIT", "YES", 1)
    do {
      let structure = try Structure(file: File(path: input.expandingTildeInPath)!)
      let sourceFile = try String(contentsOfFile: input.expandingTildeInPath)
      
      guard
        let substructures = structure.dictionary[SwiftDocKey.substructure.rawValue] as? [SourceKitRepresentable],
        let first = substructures.first,
        let secretsEnum = first as? [String: Any],
        secretsEnum[SwiftDocKey.name.rawValue] as? String? ==  "Secrets",
        secretsEnum[SwiftDocKey.kind.rawValue] as? String? ==  SwiftDeclarationKind.enum.rawValue,
        let properties = secretsEnum[SwiftDocKey.substructure.rawValue] as? [SourceKitRepresentable]
      else {
        return nil
      }
      
      
      let lines: [String?] = properties.compactMap { item in
        guard
          let propertyDict = item as? [String:Any],
          let kind = propertyDict[SwiftDocKey.kind.rawValue] as? String,
          kind == SwiftDeclarationKind.varStatic.rawValue,
          let name = propertyDict[SwiftDocKey.name.rawValue] as? String
        else {
          return nil
        }
        
        guard
          let keyOffset = propertyDict[SwiftDocKey.offset.rawValue] as? Int64,
          let keyLength = propertyDict[SwiftDocKey.length.rawValue] as? Int64,
          let nameOffset = propertyDict[SwiftDocKey.nameOffset.rawValue] as? Int64,
          let nameLength = propertyDict[SwiftDocKey.nameLength.rawValue] as? Int64
        else {
          return nil
        }
        
        let start = sourceFile.index(sourceFile.startIndex, offsetBy: Int(nameOffset) + Int(nameLength) + 3)
        let end = sourceFile.index(sourceFile.startIndex, offsetBy: Int(keyOffset) + Int(keyLength))
        let range = start..<end

        let mySubstring = sourceFile[range]  // play
        
        
        print("found local secret \(name)")
        
        let value = String(mySubstring)
        
        return "  static let \(name) = \(value)"
      }
      
      return lines.compactMap{$0}.joined(separator: "\n")
      
    } catch {
      print("error parsing \(error)")
      return nil
    }
  }
  
  func run() throws {
    
    let lines: String
    
    if let input, let localLines = readSecrets(from: input) {
      lines = localLines
    } else if let linesFromENVVars {
      lines = linesFromENVVars
    } else {
      throw PluginError.noLocalFileAndNoEnums
    }
    
    
    let file = """
// this file is automatically generated, do not edit it
// GenerateSecrets plugin generatates this file from two possible sources:
// 1. if current module has file _LocalSecrets.swift it will extract all static properties
// from enum Called Secrets into this file
// 2. if no file, then it will read all ENV VAR begining with SECRET, camelCase them and put in this struct below
// thanks to that, you can have your code opens sourced, while not exposing your secret parts :D
// Access your secrets using : Secrets.keyA, Secrets.Keyb etc
// File is called Secrets.generated.swift
enum Secrets {
 \(lines)
}
"""
    
    try file.write(toFile: output.expandingTildeInPath, atomically: true, encoding: .utf8)
    print("generating secrets file at \(output)")
  }
}


fileprivate let badChars = CharacterSet.alphanumerics.inverted

extension String {
  var uppercasingFirst: String {
    return prefix(1).uppercased() + dropFirst()
  }
  
  
  var camelized: String {
    guard !isEmpty else {
      return ""
    }
    
    let parts = self.components(separatedBy: badChars)
    
    let first = String(describing: parts.first!).lowercased()
    let rest = parts.dropFirst().map({String($0).lowercased().uppercasingFirst})
    
    return ([first] + rest).joined(separator: "")
  }
}
